structure T = Term
structure TY = Type
(* structure TLC = TopLevelCommands *)
exception Parse of string

fun createLam (var : Var.t, t : TY.t) (body : T.t) : T.t
  = T.$$(TermOps.Lam t, [(T.\\ (var, body))])

fun createRec (e : Term.t) (e0 : Term.t, x, y, e1body : Term.t) =
  let
      val e1' : Term.t = T.\\ (y, e1body)
      val e1 : Term.t = T.\\ (x, e1')
  in
      T.$$(TermOps.Rec, [e0, e1, e])
  end

fun createApp (f : T.t) (x : T.t) : T.t =
  T.$$(TermOps.App, [f, x])

fun createArr (t1 : TY.t) (t2: TY.t) : TY.t =
  Type.$$(TypeOps.ARR, [t1, t2])

val nat = TY.$$(TypeOps.NAT, [])

%%
%header (functor ExpLrValsFun (structure Token : TOKEN))


%term EOF
    | IDENT of string
    | NATTYPE
    | ARRTYPE
    | ZERO
    | SUCC
    | REC
    | LAMBDA
    | COLON
    | MAPSTO
    | LPAREN
    | RPAREN
    | LCURLY
    | RCURLY
    | BAR
    | WITH
    | SEMI

%nonterm ty of TY.t
       | exp of T.t
       | lamexp of T.t
       | lamstart of unit
       | lam1 of T.t
       | lam2 of (Var.t * TY.t)
       | recstart of unit
       | recexp of T.t
       | rec1 of T.t
       | rec2 of T.t * Var.t * Var.t * T.t
       | rec3 of Var.t * Var.t * T.t
       | rec4 of Var.t
       | rec5 of Var.t * T.t
       | rec6 of Var.t
       | rec7 of T.t
       | start of T.t
       | var of T.t
       | function of T.t
       | arg of T.t
       | app of T.t

%verbose
%pos int
%start start
%eop EOF SEMI
%noshift EOF SEMI
%name Exp
%right ARRTYPE NATTYPE
%%

start : exp (exp)

exp : ZERO              (T.$$(TermOps.Zero, []))
    | SUCC exp          (T.$$(TermOps.Succ, [exp1]))
    | LPAREN exp RPAREN (exp)
    | lamexp       (let
                       val result = lamexp
                       val _ = ParserState.restoretable()
                   in
                       result
                   end)
    | app           (app)
    | var           (var)
    | recexp       (let
                       val result = recexp
                       val _ = ParserState.restoretable()
                   in
                       result
                   end)

app : function LPAREN arg RPAREN (createApp function arg)
function : exp (exp)
arg : exp (exp)

ty : ty ARRTYPE ty                        (createArr ty1 ty2 )
   | NATTYPE                              (nat)

lamexp : lamstart lam1 (lam1)

lamstart : LAMBDA                  (ParserState.savetable())

lam1 : LPAREN lam2 RPAREN exp             ( createLam lam2 exp )

lam2 : IDENT COLON ty (let
                         val var = ParserState.addvar IDENT
                       in
                         (var,ty)
                      end)

recexp : recstart rec1 (rec1)

recstart  : REC (ParserState.savetable())

rec1 : exp rec2 (createRec exp rec2)

rec2 : LCURLY ZERO MAPSTO exp rec3 (let
                                   val (x, y, e) = rec3
                               in
                                   (exp, x, y, e)
                               end)

rec3 : BAR SUCC LPAREN rec4 RPAREN rec5  (let
                                             val x = rec4
                                             val (y, e1) = rec5
                                           in
                                             (x, y, e1)
                                           end)

rec4 : IDENT (ParserState.addvar IDENT)

rec5 : WITH rec6 rec7 (let
                          val e1 = rec7
                        in
                          (rec6, e1)
                        end)

rec6 : IDENT (ParserState.addvar IDENT)

rec7 : MAPSTO exp RCURLY (exp)

var : IDENT     (T.`` (ParserState.getvar IDENT))
